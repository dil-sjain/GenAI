<?php
/**
 * Provide access to 3P tpPersonMap
 */

namespace Models\TPM\TpProfile;

use Models\BaseLite\RequireClientID;

/**
 * Read/write access to tpType
 *
 * @keywords 3p type
 */
#[\AllowDynamicProperties]
class TpPersonMap extends RequireClientID
{
    /**
     * Table name (required by base class)
     *
     * @var string
     */
    protected $tbl = 'tpPersonMap';

    /**
     * @var boolean table is in a client database
     */
    protected $tableInClientDB = true;

    /**
     * Returns the id of the tpPersonMap for a given tpPerson.id.
     *
     * @param int $personID tpPerson.id
     * @param int $tpID     cases.tpID
     *
     * @return int tpPersonMap.id
     */
    public function getTpPersonMapID($personID, $tpID)
    {
        return (int)$this->selectValue('id', ['tpID' => $tpID, 'personID' => $personID]);
    }

    /**
     * Inserts a record into to tpPersonMap creating an association.
     *
     * @param array $principalData generated by returnPrincipalDataByIndex()
     * @param int   $personID      tpPerson.id
     * @param int   $tpID          TPM tenant ID
     *
     * @return int|false|null
     */
    public function insertTpPersonMap($principalData, $personID, $tpID)
    {
        $setValues = [
            'tpID' => $tpID,
            'personID' => $personID,
            'bIncludeInGDC' => 1, // source does not provide this value, default to 1
            'bOwner' => (int)($principalData['owner'] ?? 0),
            'ownerPercent' => ($principalData['ownerpercent'] ?? '0.000'),
            'bKeyMgr' => (int)($principalData['keymgr'] ?? 0),
            'bBoardMem' => (int)($principalData['boardmem'] ?? 0),
            'bKeyConsult' => (int)($principalData['keyconsult'] ?? 0),
            'position' => ($principalData['relationship'] ?? ''),
            'companyEmail' => (int)($principalData['email'] ?? ''),
            'companyPhone' => (int)($principalData['phone'] ?? ''),
        ];
        return $this->insert($setValues);
    }

    /**
     * Return the matching tpPersonMap record.
     *
     * @param int $tpID       thirdpartyprofile.id
     * @param int $tpPesronID tpPerson.id
     *
     * @return array|false
     */
    public function getTpPersonMapByID($tpID, $tpPesronID)
    {
        return $this->selectOne([], ['tpID' => $tpID, 'personID' => $tpPersonID]);
    }

    /**
     * Calculate total ownerPercent for owners in one tpID
     *
     * @param int $tpID            TPM tenant ID
     * @param int $excludePersonID Don't count this owner's percent - useful when updating this record
     *
     * @return string
     */
    public function calculateTotalOwnerPercent(int $tpID, int $excludePersonID = 0): string
    {
        $totalPercent = '0.000';
        $ownerShares = $this->selectMultiple(['personID', 'ownerPercent'], ['tpID' => $tpID, 'bOwner' => 1]);
        foreach ($ownerShares as $shareRecord) {
            if ($shareRecord['personID'] !== $excludePersonID) {
                $totalPercent = bcadd($totalPercent, (string) $shareRecord['ownerPercent'], 3);
            }
        }
        return $totalPercent;
    }
}
