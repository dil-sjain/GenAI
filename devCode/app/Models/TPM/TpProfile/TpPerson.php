<?php
/**
 * Provide access to 3P tpPerson
 */

namespace Models\TPM\TpProfile;

use Models\BaseLite\RequireClientID;
use Models\LogData;
use Lib\Traits\DetailedUpdate;
use Exception;

/**
 * Read/write access to tpType
 *
 * @keywords 3p type
 */
#[\AllowDynamicProperties]
class TpPerson extends RequireClientID
{
    use DetailedUpdate;

    /**
     * Table name (required by base class)
     *
     * @var string
     */
    protected $tbl = 'tpPerson';

    /**
     * @var boolean table is in a client database
     */
    protected $tableInClientDB = true;

    /**
     * @var int user.id to which audit logs are attributed
     */
    protected int $loggingUserID = 0;

    /**
     * @var array make column names to input names
     */
    protected array $fieldMap = [
        'id' => 'id',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'fullName' => 'fullName',
        'altScript' => 'altScript',
        'recType' => 'recType',
        'address' => 'address',
        'email' => 'email',
        'phone' => 'phone',
        'country' => 'country',
        // These belong to tpPersonMap
        'tpID' => 'tpID',
        'personID' => 'personID',
        'bIncludeInGDC' => 'bincludeInGDC',
        'bOwner' => 'bOwner',
        'ownerPercent' => 'ownerPercent',
        'bKeyMgr' => 'bKeyMgr',
        'bBoardMem' => 'bBoardMem',
        'bKeyConsult' => 'bKeyConsult',
        'bEmployee' => 'bEmployee',
        'position' => 'position',
    ];

    /**
     * @var array Map keys that belong to tpPersonMap
     */
    protected array $personMapFields = [
        'tpID',
        'personID',
        'bIncludeInGDC',
        'bPOC',
        'bPrimaryPOC',
        'bGovRelation',
        'bOwner',
        'ownerPercent',
        'bKeyMgr',
        'bBoardMem',
        'bKeyConsult',
        'bEmployee',
        'position',
        'companyEmail',
        'companyPhone',
    ];

    /**
     * Instantiate class and set properties
     *
     * @param int   $clientID      TPM tenant ID
     * @param int   $loggingUserID Attribute audit log engrites to this users.id
     * @param array $fieldMap      Override default mapping
     * @param array $connection    Alternate DB connection params
     */
    public function __construct($clientID, $loggingUserID = 0, $fieldMap = [], $connection = [])
    {
        parent::__construct($clientID, $connection);
        if (isset($loggingUserID)) {
            $this->loggingUserID = $loggingUserID;
        }
        if (isset($fieldMap)) {
            $this->fieldMap = $fieldMap;
        }
    }

    /**
     * Inserts Principal data off subjectInfoDD record into tpPerson.
     *
     * @param array $principalData generated by returnPrincipalDataByIndex()
     *
     * @return int
     */
    public function insertTpPerson($principalData)
    {
        if (!empty($principalData['principal'])) {
            $setValues = [
                'status' => 'active',
                'fullName' => $principalData['principal'],
                'altScript' => $principalData['principal'],
                'email' => ($principalData['email'] ?? ''),
                'phone' => ($principalData['phone'] ?? ''),
            ];
            return (int)$this->insert($setValues);
        }
        return 0;
    }

    /**
     * Given an array of Principal data, attempts to return the matching tpPerson record.
     *
     * @param array $principalData generated by returnPrincipalDataByIndex()
     *
     * @return int
     */
    public function getTpPersonIDByPrincipal($principalData)
    {
        $result = 0;
        if (!empty($principalData['altScript']) && !empty($principalData['principal'])) {
            $result = (int)$this->selectValue('id', ['altScript' => $principalData['principal']]);
        }
        if (!$result && !empty($principalData['principal'])) {
            $result = (int)$this->selectValue('id', ['fullName' => $principalData['principal']]);
        }
        return $result;
    }

    /**
     * Associate an intake form response's personnel with a third party
     *
     * @param integer $tpID      3P ID
     * @param array   $personnel Intake form response personnel
     *
     * @return void
     */
    public function linkIntakeFormPersonnelTo3P($tpID, $personnel)
    {
        $tpID = (int)$tpID;
        if (empty($tpID) || empty($personnel)) {
            return;
        }
        $sums['kp exist'] = $sums['kp assoc'] = $sums['kp insert'] = 0;
        foreach ($personnel as $person) {
            if (!empty($person['kpName'])) {
                $fld = (!empty($person['altScript'])) ? 'altScript' : 'fullName';
                $whereArray = [$fld => $person['kpName'], 'clientID' => $this->clientID];
                $personID = 0;
                if ($personArray = $this->selectOne(['id'], $whereArray)) {
                    $personID = $personArray['id'];
                }
                if (empty($personID)) { // Doesn't exist: insert new record.
                    $inputs = ['clientID' => $this->clientID, 'status' => 'active'];
                    $inputs['fullName'] = $person['kpName'];
                    if (!empty($person['altScript'])) {
                        $inputs['altScript'] = $person['kpName'];
                        if (isset($sums['kp alt'])) {
                            $sums['kp alt']++;
                        }
                    }
                    $full = $first = $last = '';
                    $isCompany = false;
                    $parsedName = \Xtra::guessNameParts($person['kpName'], $first, $last, $full, $isCompany);
                    if ($first && $last) {
                        $inputs['firstName'] = $first;
                        $inputs['lastName'] = $last;
                    } elseif ($full) {
                        $inputs['firstName'] = null;
                        $inputs['lastName'] = null;
                        if ($isCompany) {
                            $inputs['rectype'] = 'Entity';
                        }
                    }
                    if (!empty($person['kpAddr'])) {
                        $inputs['address'] = \Xtra::normalizeLF(trim((string) $person['kpAddr']));
                    }
                    if (!empty($person['kpNationality'])) {
                        $inputs['nationality'] = $person['kpNationality'];
                    }
                    if (!empty($person['email'])) {
                        $inputs['email'] = $person['email'];
                    }
                    $this->insert($inputs);
                    $personID = $this->DB->lastInsertId();
                    $sums['kp insert']++;
                } else {
                      $sums['kp exist']++;
                }

                // Associate with 3P
                if ($personID) { // Check for mapping of person to a thirdPartyProfile.
                    $whereArray = ['personID' => $personID, 'clientID' => $this->clientID, 'tpID' => $tpID];
                    $tpPersonMap = new TpPersonMap($this->clientID);
                    $map = $tpPersonMap->selectOne(['id'], $whereArray);
                    if (!$map || empty($map['id'])) { // Not mapped to a thirdPartyProfile: map it!
                        $inputs = [
                            'personID' => $personID,
                            'clientID' => $this->clientID,
                            'tpID' => $tpID,
                            'bIncludeInGDC' => 1,
                            'bKeyMgr' => $person['bkpKeyMgr'],
                            'bBoardMem' => $person['bkpBoardMem'],
                            'bKeyConsult' => $person['bkpKeyConsult']
                        ];
                        if (!empty($person['kpPosition'])) {
                            $inputs['position'] = $person['kpPosition'];
                        }
                        if (!empty($person['bkpOwner'])) {
                            $inputs['bOwner'] = 1;
                            $inputs['ownerPercent'] = $person['kpOwnPercent'];
                        }
                        $tpPersonMap->insert($inputs);
                        $sums['kp assoc']++;
                    }
                }
            }
        }
    }

    /**
     * Validate insert inputs for one connection. Does not insert record.
     *
     * ### Rules ###
     *    1. Required tpID exists and is 3P Profile or 3P Engagement
     *    2. Inputs must enable at least one role
     *    3. ownershipPercent must be between 0.000 and 100.000
     *    4. If either owner or ownershipPerson is an input, both inputs are required
     *    5. If is an owner ownershipPercent must be > 0.000
     *    6. if not an owner ownershipPercent must be 0.000
     *    7. Total ownershipPercent for tpPersonMap records for tpID must not exceed 100.000, including new value
     *    8. All columns in tpPersonMap starting with 'b' must be 0 or 1
     *    9. tpPerson record type is required and must be Person or Entity
     *   10. tpPerson.fullName and tpPersonMap.position must not contain invalid UTF-8 characters
     *       and must not exceed storage length or 255 and 50 characters, respectively
     *   11. fullName can match existing tpPerson, but must not already bei n tpPersonMap.
     *       Insert operation must detect and not insert new tpPerson.
     *
     * @param int   $tpID         thirdPartyProfile.id of record to which relationship belongs
     * @param array $inputs       Inputs for inserting tpRelate and tpPerson/tpPersonMap records
     * @param bool  $isEngagement True if tpID is 3P Engagement, otherwise tpID is 3P Profile
     *
     * @return array New primary ID or error array
     */
    public function validateInsertInputs(int $tpID, array $inputs, bool $isEngagement): array
    {
        $profileGetter = new TpProfile($this->clientID);
        $result = [
            'validatedInputs' => [],
            'errors' => [
                'missing' => [],
                'invalid' => [],
            ],
        ];

        // tpID exists and is 3P Profile or 3P Engagement
        $ownerProfile  = $profileGetter->getProfileByReference($tpID, ['id', 'userTpNum', 'isEngagement']);
        $confirmType = $isEngagement ? 1 : 0;
        if (empty($ownerProfile) || $ownerProfile['isEngagement'] !== $confirmType) {
            $tpScope = $isEngagement ? 'Engagement' : 'Profile';
            $this->setError($result, 'invalid', 'tpID', "Does not match a 3P $tpScope record");
        }

        // Any required inputs missing?
        foreach (['fullName', 'recType'] as $columnName) {
            if (!isset($inputs[$this->fieldMap[$columnName]])) {
                $this->setError($result, 'missing', $columnName);
            }
        }

        $personMap = new TpPersonMap($this->clientID);
        $enabledRoles = [];

        // Other validations

        $hasOwner = $hasOwnerPercent = false;
        $setValues = $setMapValues = $ownerErrors = $ownerPercentErrors = [];
        $formattedOwnerPercent = '0.000';
        foreach ($this->fieldMap as $columnName => $inputName) {
            if ($columnName === 'tpID' || !isset($inputs[$inputName])) {
                continue;
            }
            $value = $inputs[$inputName];
            if (str_starts_with($columnName, 'b') || $columnName === 'bIncludeInGDC') {
                $this->validateBoolean(
                    $value,
                    $inputs,
                    $columnName,
                    $inputName,
                    $hasOwner,
                    $ownerErrors,
                    $enabledRoles,
                    $result
                );
            } elseif ($columnName === 'ownerPercent') {
                $hasOwnerPercent = true;
                $this->validateOwnerPercent($value, $inputs, $inputName, $formattedOwnerPercent, $ownerPercentErrors);
            } elseif ($columnName === 'recType') {
                if ($value !== 'Person' && $value !== 'Entity') {
                    $this->setError($result, 'invalid', $columnName, 'Must be `Entity` or `Person`');
                }
            } elseif ($columnName === 'fullName' || $columnName === 'position') {
                // Check for invalid characters
                $value = $inputs[$inputName] = trim((string) $value);
                $errors = []; // can have more than one
                if ($columnName === 'fullName') {
                    $personID = $foundPersonID = 0;
                    $textTest = $this->isValidSingleLineText($value, false, 255);
                    if ($textTest !== true) {
                        $errors[] = $textTest;
                    } else {
                        // Check if $value is already in a tpPerson record for this client
                        $recordType = $inputs[$this->fieldMap['recType']] ?? 'Person';
                        $where = ['fullName' => $value, 'recType' => $recordType];
                        if (!($personID = $this->selectValue('id', $where))) {
                            $where = ['altScript' => $value, 'recType' => $recordType];
                            $personID = $this->selectOne(['id'], $where);
                        }
                        if ($personID) {
                            $foundPersonID
                                = $personMap->selectValue('personID', ['personID' => $personID, 'tpID' => $tpID]);
                            if ($foundPersonID === $personID) {
                                $errors[] = 'Same name is already connected to this 3P';
                            } else {
                                // Set hint for insert operation
                                $setMapValues['personID'] = $personID;
                            }
                        }
                    }
                } else {
                    $textTest = $this->isValidSingleLineText($value, true, 50);
                    if ($textTest !== true) {
                        $errors[] = $textTest;
                    }
                }
                if ($errors) {
                    $this->setError($result, 'invalid', $columnName, $errors);
                }
            }
            if (in_array($columnName, $this->personMapFields)) {
                $setMapValues[$columnName] = $value;
            } else {
                $setValues[$columnName] = $value;
            }
        }
        if (count($enabledRoles) < 1) {
            // Must have at least 1 role enabled
            $this->setError($result, 'invalid', 'roles', 'At least one role must be enabled');
        }

        // Set $ownerErrors and $ownerPercentErrors
        $this->finalOwnerChecks(
            $tpID,
            0,
            $inputs,
            $hasOwner,
            $hasOwnerPercent,
            $formattedOwnerPercent,
            $ownerErrors,
            $ownerPercentErrors,
            $result
        );

        // Exit with errors if validation failed
        if (!empty($result['errors']['missing']) || !empty($result['errors']['invalid'])) {
            return $result;
        }

        // Return both types of validated inputs
        $result['validatedInputs'] = [
            'tpPerson' => $setValues,
            'tpPersonMap' => $setMapValues,
        ];
        $result['errors'] = [];

        return $result;
    }

    /**
     * Insert a tpPerson/tpPersonMap pair of records with validated inputs as a single operation.
     * Does not re-validate inputs. Logs the operation and return the new (or re-used) tpPerson.id.
     *
     * @param int   $tpID   TPM tenant ID
     * @param array $inputs Validated inputs (from validateInsertInputs())
     *
     * @return int
     */
    public function insertValidatedRecord(int $tpID, array $inputs): int
    {
        // 110 | Add Associated Person
        $logEvent = 110;
        if (isset($inputs['tpPersonMap']['personID'])) {
            // don't insert a new tpPerson - use an existing one. Just map it to tpID.
            $newID = $inputs['tpPersonMap']['personID'];  // still needs to be returned as if it is a new record
            // 113 | Link Associated Person
            $logEvent = 113;
        } else {
            if (!($newID = $this->insert($inputs['tpPerson']))) {
                $newID = 0;
            }
        }
        if ($newID) {
            // Map connection to tpID an log operation
            $setValues = $inputs['tpPersonMap'];
            $setValues['tpID'] = $tpID;
            $setValues['personID'] = $newID;
            if ((new TpPersonMap($this->clientID))->insert($setValues)) {
                // Log it, but don't let logging failure prevent returning newID
                try {
                    $logger = new LogData($this->clientID, $this->loggingUserID);
                    $logMessage = "Type: `" . $inputs['tpPerson']['recType'] . "`; "
                        . "Full Name: `" . $inputs['tpPerson']['fullName'] . "`";
                    $logger->save3pLogEntry($logEvent, $logMessage, $tpID);
                } catch (Exception $e) {
                    Xtra::track([
                        'event' => 'Failed inserting tpPersonMap',
                        'error' => $e->getMessage(),
                    ]);
                }
            }
        }
        return $newID;
    }

    /**
     * Validate update for tpPerson/tpPersonMap record and perform the update if okay
     *
     * ### Rules ###
     *    1. Required tpID exists and is 3P Profile or 3P Engagement
     *    2. Required id/associationID must match tpPerson record and related tpPersonMap record
     *    3. associationID must also be an input and match id value
     *    4. tpPersonMap record must have at least one role enabled, including new values
     *    5. ownershipPercent must be between 0.000 and 100.000
     *    6. If either owner or ownershipPerson is an input, both inputs are required
     *    7. If is an owner ownershipPercent must be > 0.000
     *    8. if not an owner ownershipPercent must be 0.000
     *    9. Total ownershipPercent for tpPersonMap records for tpID must not exceed 100.000, including new value
     *   10. All columns in tpPersonMap starting with 'b' must be 0 or 1
     *   11. tpPerson record type must be Person or Entity
     *   12. tpPerson.fullName and tpPersonMap.position must not contain invalid UTF-8 characters
     *       and must not exceed storage length or 255 and 50 characters, respectively
     *   13. New fullName must not match a different tpPerson record's fullName of altScript value.
     *
     * @param int   $tpID          TPM tenant ID
     * @param int   $associationID tpPerson.id
     * @param array $inputs        Input values to validate and update
     * @param bool  $isEngagement  If true is 3P Engagement, not 3P Profile
     *
     * @return array
     */
    public function validateUpdate(int $tpID, int $associationID, array $inputs, bool $isEngagement = false): array
    {
        // Return structure
        $result = $this->getDetailedUpdateStructure();

        $profileGetter = new TpProfile($this->clientID);

        // tpID exists and is 3P Profile or 3P Engagement
        $confirmType = $isEngagement ? 1 : 0;
        $ownerProfile  = $profileGetter->getProfileByReference($tpID, ['id', 'userTpNum', 'isEngagement']);
        if (empty($ownerProfile) || $ownerProfile['isEngagement'] !== $confirmType) {
            $tpScope = $isEngagement ? 'Engagement' : 'Profile';
            $this->setError($result, 'invalid', 'tpID', "Does not match a 3P $tpScope record");
        }

        // associationID matches tpPerson.id and linked tpPersonMap.personID
        $personMap = new TpPersonMap($this->clientID);
        $personRecord = $personMapRecord = false;
        $enabledRoles = [];
        if (!($personRecord = $this->selectByID($associationID))) {
            $this->setError($result, 'invalid', 'id', 'Does not match an association');
        } elseif (!($personMapRecord = $personMap->selectOne([], ['personID' => $associationID]))) {
            $this->setError($result, 'invalid', 'id', 'Does not match an association map');
        }

        // Missing associationID?
        if (!isset($inputs[$this->fieldMap['id']])) {
            $message = 'Required for confirmation and must be same value as `id`';
            $this->setError($result, 'missing', 'id');
        } elseif ((int)$inputs[$this->fieldMap['id']] !== $associationID) {
            $this->setError($result, 'invalid', 'id', 'Must match `id` value');
        }

        // Other validations

        // Get roles that are already enabled in existing record
        if ($personMapRecord) {
            foreach (['bOwner', 'bKeyMgr', 'bBoardMem', 'bKeyConsult', 'bEmployee'] as $role) {
                if ($personMapRecord[$role]) {
                    $enabledRoles[] = $role;
                }
            }
        }

        $hasOwner = $hasOwnerPercent = false;
        $setValues = $setMapValues = $ownerErrors = $ownerPercentErrors = [];
        $formattedOwnerPercent = '0.000';
        foreach ($this->fieldMap as $columnName => $inputName) {
            if ($columnName === 'tpID' || $columnName == 'id' || !isset($inputs[$inputName])) {
                continue;
            }
            $value = $inputs[$inputName];
            if (str_starts_with($columnName, 'b') || $columnName === 'bIncludeInGDC') {
                $this->validateBoolean(
                    $value,
                    $inputs,
                    $columnName,
                    $inputName,
                    $hasOwner,
                    $ownerErrors,
                    $enabledRoles,
                    $result
                );
            } elseif ($columnName === 'ownerPercent') {
                $hasOwnerPercent = true;
                $this->validateOwnerPercent($value, $inputs, $inputName, $formattedOwnerPercent, $ownerPercentErrors);
            } elseif ($columnName === 'recType') {
                if ($value !== 'Person' && $value !== 'Entity') {
                    $this->setError($result, 'invalid', $columnName, 'Must be `Entity` or `Person`');
                }
            } elseif ($columnName === 'fullName' || $columnName === 'position') {
                // Check for invalid characters
                $value = $inputs[$inputName] = trim((string) $value);
                $errors = []; // can have more than one
                if ($columnName === 'fullName') {
                    $textTest = $this->isValidSingleLineText($value, false, 255);
                    if ($textTest !== true) {
                        $errors[] = $textTest;
                    } else {
                        // Check if $value is already in a different tpPerson record for this client
                        $matches = $this->selectMultiple(['id'], ['fullName' => $value]);
                        $found = false;
                        foreach ($matches as $record) {
                            if ($record['id'] !== $associationID) {
                                $found = true;
                                break;
                            }
                        }
                        if (!$found) {
                            $matches = $this->selectMultiple(['id'], ['altScript' => $value]);
                            foreach ($matches as $record) {
                                if ($record['id'] !== $associationID) {
                                    $found = true;
                                    break;
                                }
                            }
                        }
                        if ($found) {
                            $errors[] = 'Same name already exists in another record';
                        }
                    }
                } else {
                    // position
                    $textTest = $this->isValidSingleLineText($value, true, 50);
                    if ($textTest !== true) {
                        $errors[] = $textTest;
                    }
                }
                if ($errors) {
                    $this->setError($result, 'invalid', $columnName, $errors);
                }
            }
            if (in_array($columnName, $this->personMapFields)) {
                $setMapValues[$columnName] = $value;
            } else {
                $setValues[$columnName] = $value;
            }
        }
        if (count($enabledRoles) < 1) {
            // Must have at least 1 role enabled - including in existing record
            $this->setError($result, 'invalid', 'roles', 'At least one role must be enabled');
        }

        // Set $ownerErrors and $ownerPercentErrors
        $this->finalOwnerChecks(
            $tpID,
            $associationID,
            $inputs,
            $hasOwner,
            $hasOwnerPercent,
            $formattedOwnerPercent,
            $ownerErrors,
            $ownerPercentErrors,
            $result
        );

        // Exit with errors if validation failed
        if (!empty($result['errors']['missing']) || !empty($result['errors']['invalid'])) {
            return $result;
        }

        // Attempt the update tpPerson and tpPersonMap and audit log
        $personUpdated = $personMapUpdated = 0;
        if ($setValues) {
            $personUpdated = $this->updateById($associationID, $setValues);
        }
        if ($setMapValues) {
            $personMapUpdated = $personMap->update($setMapValues, ['tpID' => $tpID,'personID' => $associationID]);
        }
        if ($personUpdated || $personMapUpdated) {
            try {
                $result['updated'] = 1;// treat these updates as a single record update
                // 111 | Update Associated Person
                $changes = [];// For tpPersonMap
                foreach ($setMapValues as $column => $value) {
                    $original = $personMapRecord[$column];
                    if ($original !== $value) {
                        $changes[] = "$column: `$original` => `$value`";
                        $result['affected data'][$this->fieldMap[$column]] = [
                            'original' => $original,
                            'new' => $value,
                        ];
                    }
                }// For tpPerson
                foreach ($setValues as $column => $value) {
                    $original = $personRecord[$column];
                    if ($original !== $value) {
                        $changes[] = "$column: `$original` => `$value`";
                        $result['affected data'][$this->fieldMap[$column]] = [
                            'original' => $original,
                            'new' => $value,
                        ];
                    }
                }
                $logMessage = implode('; ', $changes);
                (new LogData($this->clientID, $this->loggingUserID))
                    ->save3pLogEntry(111, $logMessage, $tpID);
            } catch (Exception $e) {
                // Don't let logging failure prevent return
                \Xtra::track('Audit log failure: ' . $e->getMessage());
            }
        } else {
            $result['updated'] = 0;
            unset($result['affected data']);
        }

        return $result;
    }

    /**
     * Test text value for invalid characters and maximum length
     *
     * @param string $value      UTF-8 text to test
     * @param bool   $allowEmpty If true must not be ''
     * @param int    $maxLength  Maximum length allowed, characters not bytes
     *
     * @return string|true
     */
    public function isValidSingleLineText(string $value, bool $allowEmpty, int $maxLength = 0)
    {
        $decoded = urldecode($value);
        if (!preg_match('//u', $decoded)
            || strlen($decoded) !== strlen($value)
            || preg_match('/[^[:print:]]/u', $value)
        ) {
            return 'Contains one or more invalid characters';
        } elseif (mb_strlen($value) > $maxLength) {
            if ($allowEmpty) {
                return "Length must not exceed $maxLength characters";
            } else {
                return "Length must be between 1 and $maxLength characters";
            }
        }
        return true;
    }

    /**
     * Validate ownerPercent, preserving changes to local variables
     *
     * @param string $value                 local variable reference
     * @param array  $inputs                local variable reference
     * @param string $inputName             local variable
     * @param string $formattedOwnerPercent local variable reference
     * @param array  $ownerPercentErrors    local variable reference
     *
     * @return void
     */
    private function validateOwnerPercent(
        string &$value,
        array &$inputs,
        string $inputName,
        string &$formattedOwnerPercent,
        array &$ownerPercentErrors
    ): void {
        $value = $inputs[$inputName] = trim($value, '%');
        $message = 'Must be between `0.000` and `100.000`';
        if (!preg_match('/^\d{1,3}(\.(\d+){0,3})?$/', $value)) {
            // Must be 0.000 or 0.000%
            $ownerPercentErrors[] = $message;
        } else {
            $formattedOwnerPercent = bcadd($value, '0.000', 3);
            if ($formattedOwnerPercent < '0.000' || $formattedOwnerPercent > '100.000') {
                $ownerPercentErrors[] = $message;
            } else {
                $value = $inputs[$inputName] = $formattedOwnerPercent;
            }
        }
    }

    /**
     * Validate boolean inputs, preserving changes to local variables
     *
     * @param int|string $value        local variable reference
     * @param array      $inputs       local variable reference
     * @param string     $columnName   local variable
     * @param string     $inputName    local variable
     * @param bool       $hasOwner     local variable reference
     * @param array      $ownerErrors  local variable reference
     * @param array      $enabledRoles local variable reference
     * @param array      $result       local variable reference
     *
     * @return void
     */
    private function validateBoolean(
        &$value,
        array &$inputs,
        string $columnName,
        string $inputName,
        bool &$hasOwner,
        array &$ownerErrors,
        array &$enabledRoles,
        array &$result
    ): void {
        if ($columnName === 'bOwner') {
            $hasOwner = true;
        }
        // Must be 0 or 1
        $match = [];
        if (!is_int($value) && preg_match('/^(\d+)$/', $value, $match)) {
            $value = $inputs[$inputName] = (int)$match[1];
        }
        if ($value !== 0 && $value !== 1) {
            $message = 'Must be 0 or 1';
            if ($columnName === 'bOwner') {
                $ownerErrors[] = $message;
            } else {
                $this->setError($result, 'invalid', $columnName, $message);
            }
        }
        if ($columnName !== 'bIncludeInGDC') {
            if ($value === 0) {
                if (in_array($columnName, $enabledRoles)) {
                    unset($enabledRoles[$columnName]);
                }
            } elseif ($value === 1) {
                if (!in_array($columnName, $enabledRoles)) {
                    $enabledRoles[] = $columnName;
                }
            }
        }
    }

    /**
     * Final owner/ownerPercent checks, preserving changes to local variables
     *
     * @param int    $tpID                  local variable
     * @param int    $associationID         local variable
     * @param array  $inputs                local variable
     * @param bool   $hasOwner              local variable
     * @param bool   $hasOwnerPercent       local variable
     * @param string $formattedOwnerPercent local variable
     * @param array  $ownerErrors           local variable reference
     * @param array  $ownerPercentErrors    local variable reference
     * @param array  $result                local variable reference
     *
     * @return void
     */
    private function finalOwnerChecks(
        int $tpID,
        int $associationID,
        array $inputs,
        bool $hasOwner,
        bool $hasOwnerPercent,
        string $formattedOwnerPercent,
        array &$ownerErrors,
        array &$ownerPercentErrors,
        array &$result
    ): void {
        if ($hasOwnerPercent && !$hasOwner) {
            $ownerErrors[] = 'owner must be include when ownershipPercent is present';
        } elseif ($hasOwner && !$hasOwnerPercent) {
            $ownerPercentErrors[] = 'ownershipPercent must be included when owner is present';
        } elseif ($hasOwner) {
            if ($inputs[$this->fieldMap['bOwner']] === 0) {
                if ($formattedOwnerPercent !== '0.000') {
                    $ownerPercentErrors[] = "Must be `0.000` if not an owner";
                }
            } elseif ($inputs[$this->fieldMap['bOwner']] === 1) {
                if ($formattedOwnerPercent === '0.000') {
                    $ownerPercentErrors[] = "Must be greater than `0.000` for an owner";
                } elseif ($associationID) {
                    // Make sure total for tpID does not exceed 100.000%
                    $personMap = new TpPersonMap($this->clientID);
                    $totalOwned = $personMap->calculateTotalOwnerPercent($tpID, $associationID);
                    $totalOwned = bcadd($totalOwned, $formattedOwnerPercent, 3);
                    if ($totalOwned > '100.000') {
                        $ownerPercentErrors[] = 'Total ownershipPercent for Third Party must not exceed `100.000`';
                    }
                }
            }
        }
        if ($ownerErrors) {
            $this->setError($result, 'invalid', 'bOwner', $ownerErrors);
        }
        if ($ownerPercentErrors) {
            $this->setError($result, 'invalid', 'ownerPercent', $ownerPercentErrors);
        }
    }
}
